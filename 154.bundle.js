"use strict";(self.webpackChunk_ibyar_webpack=self.webpackChunk_ibyar_webpack||[]).push([[154],{121:(t,e,r)=>{r.d(e,{F:()=>o});var n=r(508),s=r(948);function o(t,e){return void 0===t&&(t=0),void 0===e&&(e=n.z),t<0&&(t=0),(0,s.H)(t,t,e)}},948:(t,e,r)=>{r.d(e,{H:()=>l});var n=r(919),s=r(508),o=r(126);function l(t,e,r){void 0===t&&(t=0),void 0===r&&(r=s.P);var l,a=-1;return null!=e&&((l=e)&&(0,o.m)(l.schedule)?r=e:a=e),new n.y((function(e){var n=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-r.now():t;n<0&&(n=0);var s=0;return r.schedule((function(){e.closed||(e.next(s++),0<=a?this.schedule(void 0,a):e.complete())}),n)}))}},154:(t,e,r)=>{r.r(e),r.d(e,{PipeAppComponent:()=>l});var n=r(163),s=r(809),o=r(121);let l=class{constructor(){this.text="Lorem ipsum is placeholder text commonly used in the graphic, print, and publishing industries for previewing layouts and visual mockups",this.obj={a:[1,2,3],b:"property b",c:{d:[],e:4,f:[{5:"g"}]}},this.keyValueObject={1:100,a:"A00"},this.keyValueArray=[200,300],this.keyValueMap=new Map([[1,400],[2,500],[3,"B200"]]),this.observable=(0,o.F)(1e3),this.array=["a","b","c","d"],this.users=[{firstName:"Tinu",lastName:"Elejogun",age:14},{firstName:"Mark",lastName:"Kostrzewski",age:25},{firstName:"Lily",lastName:"McGarrett",age:18},{firstName:"Adela",lastName:"Athanasios",age:22}],this.colors=["--bs-blue","--bs-indigo","--bs-purple","--bs-pink","--bs-red","--bs-orange","--bs-yellow","--bs-green","--bs-teal","--bs-cyan","--bs-white","--bs-gray","--bs-gray-dark"],this.currentColor=this.colors[0]}onInit(){let t=0;this._subscription=this.observable.subscribe((()=>{t===this.colors.length&&(t=0),this.currentColor=this.colors[t++]}))}onDestroy(){this._subscription.unsubscribe()}};l=(0,n.gn)([(0,s.wA2)({selector:"pipe-app",template:'\n\t<style>.bs-color{color: var({{currentColor}});}</style>\n\t<div style="color: var({{currentColor}});"> set style color by style="color: var({{currentColor}});"</div>\n\t<div [style]="\'color: var(\' + currentColor + \');\'"> set style color by [style]="\'color: var(\' + currentColor + \');\'" </div>\n\t<div [style.color]="\'var(\' + currentColor + \')\'"> set style color by [style.color]="\'var(\' + currentColor + \')\'" </div>\n\t<div [style]="{color: \'var(\' + currentColor + \')\'}"> set style color by [style]="{color: \'var(\' + currentColor + \')\'}" </div>\n\t\x3c!-- <div [class.bsColor]="currentColor === \'--bs-red\' "> set style color by [style.color]="\'var(\' + currentColor + \')\'" </div> --\x3e\n\t<div *for="var color of colors">\n\t\tcolor: {{color}} <span *if="color === currentColor" class="bs-color"> => Current Color =\'{{currentColor}}\'</span>\n\t</div>\n    <table class="table">\n        <thead>\n            <tr>\n                <th class="bs-color" scope="col">pipe</th>\n                <th class="bs-color" scope="col">expression</th>\n                <th class="bs-color" scope="col">view</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>async</td>\n                <td>observable |> async</td>\n                <td>{{observable |> async}}</td>\n            </tr>\n            <tr>\n                <td>*</td>\n                <td>text</td>\n                <td>{{text}}</td>\n            </tr>\n            <tr>\n                <td>lowercase</td>\n                <td>text |> lowercase</td>\n                <td>{{text |> lowercase}}</td>\n            </tr>\n            <tr>\n                <td>titlecase</td>\n                <td>text |> titlecase</td>\n                <td>{{text |> titlecase}}</td>\n            </tr>\n            <tr>\n                <td>uppercase</td>\n                <td>text |> uppercase</td>\n                <td>{{text |> uppercase}}</td>\n            </tr>\n            <tr>\n                <td>json</td>\n                <td>obj |> json</td>\n                <td>{{obj |> json}}</td>\n            </tr>\n            <tr>\n                <td>json <small>pre element</small></td>\n                <td>obj |> json:undefined:2</td>\n                <td>\n                    <pre>{{obj |> json:undefined:2}}</pre>\n                </td>\n            </tr>\n            <tr>\n                <td>keyvalue</td>\n                <td>keyValueObject |> keyvalue</td>\n                <td>{{keyValueObject |> keyvalue |> json}}</td>\n            </tr>\n            <tr>\n                <td>keyvalue</td>\n                <td>keyValueObject |> keyvalue</td>\n                <td>{{keyValueObject |> keyvalue |> json}}</td>\n            </tr>\n            <tr>\n                <td>keyvalue</td>\n                <td>keyValueMap |> keyvalue</td>\n                <td>{{keyValueMap |> keyvalue |> json}}</td>\n            </tr>\n            <tr>\n                <td>slice</td>\n                <td>array |> slice:1:3</td>\n                <td>{{array |> slice:1:3}}</td>\n            </tr>\n            <tr>\n                <td>slice</td>\n                <td>slice(array, 1, 3)</td>\n                <td>{{slice(array, 1, 3)}}</td>\n            </tr>\n            <tr>\n                <td>call windows method directly</td>\n                <td>3345.54645 |> Math.trunc</td>\n                <td>{{3345.54645 |> Math.trunc}}</td>\n            </tr>\n        </tbody>\n    </table>\n\n\t<table class="table" aria-label="table">\n\t\t<thead>\n\t\t\t<tr elHeight="350px">\n\t\t\t\t<th scope="col">#</th>\n\t\t\t\t<th scope="col">First</th>\n\t\t\t\t<th scope="col">Last</th>\n\t\t\t\t<th scope="col">Age</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<template *forOf="let user of users; index as idx; even as isEven; odd as isOdd; count as tableLength; first as isFirst; last as isLast">\n\t\t\t\t<tr [class]="{\'table-info\': isEven, \'table-danger\': isOdd}">\n\t\t\t\t\t<th scope="row">{{ ({idx, tableLength, isEven, isOdd, isFirst, isLast }) |> json }}</th>\n\t\t\t\t\t<td>{{user.firstName}}</td>\n\t\t\t\t\t<td>{{user.lastName}}</td>\n\t\t\t\t\t<td>{{user.age}}<div *if="user.age > 18">ðŸ•º</div></td>\n\t\t\t\t</tr>\n\t\t\t</template>\n\t\t</tbody>\n\t</table>\n    '})],l)}}]);
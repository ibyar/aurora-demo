"use strict";(self.webpackChunk_ibyar_webpack=self.webpackChunk_ibyar_webpack||[]).push([[513],{513:(t,i,s)=>{s.r(i),s.d(i,{ManualSlotExample:()=>a});var e=s(2970),n=s(8558);let a=(()=>{let t,i,s,a,l,o,d=[(0,n.wA2)({selector:"manual-slot",encapsulation:"shadow-dom",shadowRootInit:{mode:"open",slotAssignment:"manual"},template:'<div class="d-flex">\n\t\t<div>\n\t\t\tslot begin\n\t\t\t<slot #slot name="slot-el">NEED DESCRIPTION</slot>\n\t\t\tslot end\n\t\t</div>\n\t\t<div #div1 slot="slot-el">div A</div>\n\t\t<div #div2 slot="slot-el">div B</div>\n\t\t<div>\n\t\t\t<button class="btn btn-primary" @click="assignDiv1()">Assign div A</button>\n\t\t\t<button class="btn btn-primary" @click="assignDiv2()">Assign div B</button>\n\t\t\t<button class="btn btn-primary" @click="assign(++count)">Append div {{count + 1}}</button>\n\t\t</div>\n\t\t<div>\n\t\t</div>\n\t</div>'})],v=[],c=[],u=[],h=[],m=[],r=[];return class{static{i=this}static{const b="function"==typeof Symbol&&Symbol.metadata?Object.create(null):void 0;s=[(0,n.G7x)()],a=[(0,n.i9L)("slot")],l=[(0,n.i9L)("div1")],o=[(0,n.i9L)("div2")],(0,e.xE)(null,null,s,{kind:"field",name:"view",static:!1,private:!1,access:{has:t=>"view"in t,get:t=>t.view,set:(t,i)=>{t.view=i}},metadata:b},u,c),(0,e.xE)(null,null,a,{kind:"field",name:"slot",static:!1,private:!1,access:{has:t=>"slot"in t,get:t=>t.slot,set:(t,i)=>{t.slot=i}},metadata:b},h,c),(0,e.xE)(null,null,l,{kind:"field",name:"div1",static:!1,private:!1,access:{has:t=>"div1"in t,get:t=>t.div1,set:(t,i)=>{t.div1=i}},metadata:b},m,c),(0,e.xE)(null,null,o,{kind:"field",name:"div2",static:!1,private:!1,access:{has:t=>"div2"in t,get:t=>t.div2,set:(t,i)=>{t.div2=i}},metadata:b},r,c),(0,e.xE)(null,t={value:i},d,{kind:"class",name:i.name,metadata:b},null,v),i=t.value,b&&Object.defineProperty(i,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:b}),(0,e.Co)(i,v)}count=((0,e.Co)(this,c),0);view=(0,e.Co)(this,u,void 0);slot=(0,e.Co)(this,h,void 0);div1=(0,e.Co)(this,m,void 0);div2=(0,e.Co)(this,r,void 0);onInit(){void 0!==this.slot&&console.error("slot should be not defied yet")}afterViewInit(){void 0===this.slot&&console.error("slot should be not `undefined` yet"),this.slot.addEventListener("slotchange",(t=>{const i=this.slot.assignedNodes();console.log(`Element in Slot "${this.slot.name}" changed to:`,i)})),this.view.append(this.div1),this.view.append(this.div2)}assign(t){const i=document.createElement("div");i.innerText="manual slot assignment "+t,this.view.append(i),this.slot.assign(i),console.log(this.slot,i)}assignDiv1(){this.slot.assign(this.div1)}assignDiv2(){this.slot.assign(this.div2)}},i})()}}]);